#!/usr/bin/env python3
"""
Kleinanzeigen Scraper - Core Module
===================================

Hauptklasse f√ºr das Scraping von Kleinanzeigen-Dienstleistungen.

Dieses Modul demonstriert die Grundstruktur des Scrapers.
F√ºr die vollst√§ndige Funktionalit√§t sind zus√§tzliche Module erforderlich.
"""

import requests
from bs4 import BeautifulSoup
import time
import re
from urllib.parse import urljoin
from dataclasses import dataclass
from typing import List, Optional

@dataclass
class DienstleistungsAnzeige:
    """Datenklasse f√ºr eine Dienstleistungsanzeige"""
    titel: str
    beschreibung: str
    preis: Optional[str]
    ort: str
    kategorie: str
    kontakt: str
    url: str
    datum: Optional[str]
    tags: List[str]

class KleinanzeigenScraper:
    """
    Hauptklasse f√ºr das Scraping von Kleinanzeigen
    
    Diese Klasse implementiert respektvolle Scraping-Praktiken:
    - Wartezeiten zwischen Anfragen
    - Beachtung von robots.txt
    - User-Agent-Header
    - Fehlerbehandlung
    """
    
    def __init__(self, base_url="https://www.kleinanzeigen.de"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (compatible; KleinanzeigenScraper/1.0)',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'de-DE,de;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        })
        
        # Dienstleistungskategorien
        self.kategorien = {
            'handwerk': ['handwerker', 'reparatur', 'installation', 'renovierung'],
            'reinigung': ['reinigung', 'putzen', 'haushaltsreinigung'],
            'garten': ['garten', 'rasenm√§hen', 'heckenschnitt', 'gartenarbeit'],
            'transport': ['umzug', 'transport', 'lieferung', 'kurierdienst'],
            'betreuung': ['babysitter', 'kinderbetreuung', 'tiersitting'],
            'unterricht': ['nachhilfe', 'unterricht', 'coaching', 'training'],
            'beauty': ['friseur', 'kosmetik', 'massage', 'wellness'],
            'it': ['computer', 'programmierung', 'website', 'technik'],
        }

    def respektiere_robots_txt(self, url):
        """Einfache robots.txt √úberpr√ºfung"""
        try:
            robots_url = urljoin(url, '/robots.txt')
            response = self.session.get(robots_url, timeout=5)
            return 'Disallow: /' not in response.text
        except:
            return True

    def warte_zwischen_anfragen(self, sekunden=2):
        """Wartezeit zwischen Anfragen f√ºr respektvolles Scraping"""
        time.sleep(sekunden)

    def demo_extrahiere_anzeigen(self, suchbegriff, ort="", max_seiten=3):
        """
        Demo-Implementierung der Anzeigen-Extraktion
        
        In der vollst√§ndigen Version w√ºrde hier echtes Web-Scraping stattfinden.
        Diese Demo-Version generiert Beispieldaten.
        """
        print(f"üîç Demo-Scraping: Suche nach '{suchbegriff}' in '{ort}'")
        print(f"üìÑ Maximale Seiten: {max_seiten}")
        
        # Simuliere Verarbeitungszeit
        time.sleep(1)
        
        # Generiere Demo-Daten basierend auf Suchbegriff
        demo_anzeigen = []
        
        if 'handwerk' in suchbegriff.lower() or 'reparatur' in suchbegriff.lower():
            demo_anzeigen.extend([
                DienstleistungsAnzeige(
                    titel="Handwerker f√ºr alle Reparaturen",
                    beschreibung="Erfahrener Handwerker bietet Reparaturen aller Art",
                    preis="45 ‚Ç¨/h",
                    ort=ort or "Berlin",
                    kategorie="handwerk",
                    kontakt="Siehe Anzeige",
                    url="https://example.com/demo1",
                    datum="2025-06-04",
                    tags=["handwerk", "reparatur"]
                ),
                DienstleistungsAnzeige(
                    titel="Renovierungsarbeiten vom Profi",
                    beschreibung="Komplette Renovierung von Wohnungen und H√§usern",
                    preis="350 ‚Ç¨ VB",
                    ort=ort or "M√ºnchen",
                    kategorie="handwerk",
                    kontakt="Siehe Anzeige",
                    url="https://example.com/demo2",
                    datum="2025-06-04",
                    tags=["handwerk", "renovierung"]
                )
            ])
        
        if 'web' in suchbegriff.lower() or 'it' in suchbegriff.lower():
            demo_anzeigen.extend([
                DienstleistungsAnzeige(
                    titel="Webentwicklung - Modern & Responsive",
                    beschreibung="Professionelle Websites mit React und Python",
                    preis="75 ‚Ç¨/h",
                    ort=ort or "Hamburg",
                    kategorie="it",
                    kontakt="Siehe Anzeige",
                    url="https://example.com/demo3",
                    datum="2025-06-04",
                    tags=["it", "webentwicklung", "react"]
                )
            ])
        
        if 'reinigung' in suchbegriff.lower():
            demo_anzeigen.extend([
                DienstleistungsAnzeige(
                    titel="Professionelle Haushaltsreinigung",
                    beschreibung="Zuverl√§ssige Reinigungskraft f√ºr Privathaushalte",
                    preis="15 ‚Ç¨/h",
                    ort=ort or "K√∂ln",
                    kategorie="reinigung",
                    kontakt="Siehe Anzeige",
                    url="https://example.com/demo4",
                    datum="2025-06-04",
                    tags=["reinigung", "haushalt"]
                )
            ])
        
        # Falls keine spezifischen Kategorien gefunden, generiere allgemeine Anzeigen
        if not demo_anzeigen:
            demo_anzeigen = [
                DienstleistungsAnzeige(
                    titel=f"Dienstleistung: {suchbegriff}",
                    beschreibung=f"Professionelle {suchbegriff} Dienstleistung",
                    preis="Auf Anfrage",
                    ort=ort or "Deutschland",
                    kategorie="sonstige",
                    kontakt="Siehe Anzeige",
                    url="https://example.com/demo_general",
                    datum="2025-06-04",
                    tags=[suchbegriff.lower()]
                )
            ]
        
        print(f"‚úÖ Demo abgeschlossen: {len(demo_anzeigen)} Anzeigen gefunden")
        return demo_anzeigen

    def bestimme_kategorie(self, text):
        """Bestimmt die Kategorie basierend auf dem Text"""
        text_lower = text.lower()
        
        for kategorie, keywords in self.kategorien.items():
            for keyword in keywords:
                if keyword in text_lower:
                    return kategorie
        
        return 'sonstige'

    def filtere_nach_kategorie(self, anzeigen: List[DienstleistungsAnzeige], kategorie: str):
        """Filtert Anzeigen nach Kategorie"""
        return [anzeige for anzeige in anzeigen if anzeige.kategorie == kategorie]

    def filtere_nach_ort(self, anzeigen: List[DienstleistungsAnzeige], ort: str):
        """Filtert Anzeigen nach Ort"""
        return [anzeige for anzeige in anzeigen if ort.lower() in anzeige.ort.lower()]

    def filtere_nach_preisspanne(self, anzeigen: List[DienstleistungsAnzeige], min_preis=None, max_preis=None):
        """Filtert Anzeigen nach Preisspanne"""
        if min_preis is None and max_preis is None:
            return anzeigen
        
        gefilterte_anzeigen = []
        
        for anzeige in anzeigen:
            preis_text = anzeige.preis
            # Extrahiere Preis aus Text
            preis_match = re.search(r'(\d+(?:,\d+)?)', preis_text.replace('.', ''))
            
            if preis_match:
                try:
                    preis = float(preis_match.group(1).replace(',', '.'))
                    
                    if min_preis is not None and preis < min_preis:
                        continue
                    if max_preis is not None and preis > max_preis:
                        continue
                    
                    gefilterte_anzeigen.append(anzeige)
                except ValueError:
                    # Wenn Preis nicht konvertierbar, trotzdem hinzuf√ºgen
                    gefilterte_anzeigen.append(anzeige)
            else:
                # Wenn kein Preis erkennbar, hinzuf√ºgen
                gefilterte_anzeigen.append(anzeige)
        
        return gefilterte_anzeigen

# Demo-Funktion
def main():
    """Demo der Scraper-Funktionalit√§t"""
    print("üîç Kleinanzeigen Scraper - Demo")
    print("=" * 40)
    
    scraper = KleinanzeigenScraper()
    
    # Demo-Suche
    suchbegriff = "Handwerker"
    ort = "Berlin"
    
    print(f"\nüìã Suche nach '{suchbegriff}' in {ort}...")
    anzeigen = scraper.demo_extrahiere_anzeigen(suchbegriff, ort, max_seiten=2)
    
    print(f"\nüìä Gefunden: {len(anzeigen)} Anzeigen")
    
    # Zeige erste 3 Anzeigen
    for i, anzeige in enumerate(anzeigen[:3]):
        print(f"\n--- Anzeige {i+1} ---")
        print(f"Titel: {anzeige.titel}")
        print(f"Preis: {anzeige.preis}")
        print(f"Ort: {anzeige.ort}")
        print(f"Kategorie: {anzeige.kategorie}")
        print(f"Tags: {', '.join(anzeige.tags)}")
    
    # Demo Filter
    print(f"\nüéØ Filter-Demo:")
    handwerk_anzeigen = scraper.filtere_nach_kategorie(anzeigen, 'handwerk')
    print(f"Handwerk-Anzeigen: {len(handwerk_anzeigen)}")
    
    print(f"\nüí° Hinweis: Dies ist eine Demo-Version!")
    print(f"   F√ºr echtes Scraping installieren Sie die Vollversion.")

if __name__ == "__main__":
    main()